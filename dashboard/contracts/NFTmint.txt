// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "./IAffiliateTracker.sol";
import "./IERC20.sol";

contract NFTMint is ERC721, ERC721Burnable, Ownable, ReentrancyGuard {
    struct Affiliate {
        bool instantDirectPayment;
    }

    struct RoyaltyInfo {
        uint256 percentage;
        address creator;
    }

    uint256 private _tokenIdCounter = 1;
    mapping(uint256 => string) private _tokenURIs;
    mapping(uint256 => uint256) public tokenPrices;
    mapping(uint256 => address) public tokenSellers;
    mapping(uint256 => uint256) public nftCommissionRates;
    mapping(address => Affiliate) public affiliates;
    mapping(uint256 => RoyaltyInfo) public royaltyInfo;

    IAffiliateTracker public affiliateTracker;
    uint256 public defaultCommissionRate = 10;
    address public defaultAffiliate;

    IERC20 public PLRT;

    event TokenSold(uint256 indexed tokenId, address indexed buyer, uint256 salePrice);
    event NFTListed(uint256 indexed tokenId, string uri, uint256 price);
    event AffiliateRegistered(address indexed affiliate, uint256 commissionRate);
    event AffiliateRevoked(address indexed affiliate);
    event CommissionPaid(address indexed affiliate, uint256 amount, uint256 tokenId);
    event DirectPaymentToggled(address indexed affiliate, bool isEnabled);
    event CommissionRateUpdated(address indexed affiliate, uint256 newRate);
    event NFTCommissionRateSet(uint256 indexed tokenId, uint256 commissionRate);
    event RoyaltySet(uint256 indexed tokenId, uint256 percentage, address indexed creator);
    event RoyaltyPaid(address indexed creator, uint256 amount, uint256 tokenId);
    event NFTMinted(uint256 indexed tokenId, address indexed creator, string tokenURI);
    event PaymentMade(address indexed buyer, uint256 amount, uint256 discountedAmount, address tokenAddress);

    constructor(string memory name, string memory symbol, address _affiliateTrackerAddress, address _PLRTAddress)
        ERC721(name, symbol)
        Ownable(msg.sender)
    {
        affiliateTracker = IAffiliateTracker(_affiliateTrackerAddress);
        PLRT = IERC20(_PLRTAddress);
    }

    function setRoyalty(uint256 tokenId, uint256 percentage, address creator) public onlyOwner {
        require(percentage <= 100, "Royalty percentage cannot exceed 100");
        royaltyInfo[tokenId] = RoyaltyInfo(percentage, creator);
        emit RoyaltySet(tokenId, percentage, creator);
    }

    function setNFTCommissionRate(uint256 tokenId, uint256 newCommissionRate) public {
        address tokenOwner = ownerOf(tokenId);
        require(
            msg.sender == tokenOwner ||
            getApproved(tokenId) == msg.sender ||
            isApprovedForAll(tokenOwner, msg.sender),
            "Caller is not owner nor approved"
        );
        require(newCommissionRate <= 100, "Commission rate cannot exceed 100");
        nftCommissionRates[tokenId] = newCommissionRate;
        emit NFTCommissionRateSet(tokenId, newCommissionRate);
    }

    function buyNFT(uint256 tokenId, address affiliate, address paymentToken) public payable nonReentrant {
        uint256 salePrice = tokenPrices[tokenId];
        require(salePrice > 0, "Token not for sale");

        uint256 commissionRateForNFT = nftCommissionRates[tokenId] > 0 ? nftCommissionRates[tokenId] : defaultCommissionRate;
        uint256 commission = calculateCommission(salePrice, commissionRateForNFT);

        if (paymentToken == address(0)) { // BNB payment
            require(msg.value >= salePrice, "Insufficient BNB sent");
        } else if (paymentToken == address(PLRT)) { // PLRT payment
            require(PLRT.transferFrom(msg.sender, address(this), salePrice), "PLRT transfer failed");
        } else {
            revert("Invalid payment token");
        }

        delete _tokenURIs[tokenId];
        delete tokenPrices[tokenId];
        delete tokenSellers[tokenId];

        if (paymentToken == address(0)) { // BNB payment
            payable(tokenSellers[tokenId]).transfer(salePrice - commission);
        } else { // PLRT payment
            require(PLRT.transfer(tokenSellers[tokenId], salePrice - commission), "PLRT transfer failed");
        }

        payRoyalty(tokenId, salePrice, paymentToken);

        require(PLRT.transferFrom(msg.sender, address(this), commission), "PLRT transfer failed");
        if (commission > 0) {
            if (affiliate != address(0)) {
                affiliateTracker.payCommission(affiliate, commission, address(PLRT), tokenId);
            } else {
                affiliateTracker.payCommission(defaultAffiliate, commission, address(PLRT), tokenId);
            }
        }

        _safeMint(msg.sender, tokenId);
        emit TokenSold(tokenId, msg.sender, salePrice);
    }

   function payRoyalty(uint256 tokenId, uint256 salePrice, address paymentToken) internal {
    require(paymentToken == address(PLRT), "Invalid payment token");

    RoyaltyInfo memory royalty = royaltyInfo[tokenId];
    require(royalty.creator != address(0), "Royalty not set for this NFT");

    uint256 royaltyAmount = (salePrice * royalty.percentage) / 100;
    // Transfer royalty amount in PLRT tokens to the creator
    require(PLRT.transferFrom(msg.sender, royalty.creator, royaltyAmount), "PLRT transfer failed");

    emit RoyaltyPaid(royalty.creator, royaltyAmount, tokenId);
}


    function calculateCommission(uint256 _salePrice, uint256 _rate) public pure returns (uint256) {
        return (_salePrice * _rate) / 100;
    }

    function setDefaultAffiliate(address affiliate) public onlyOwner {
        defaultAffiliate = affiliate;
    }

    function setDefaultCommissionRate(uint256 newRate) public onlyOwner {
        require(newRate >= 1 && newRate <= 100, "Invalid commission rate");
        defaultCommissionRate = newRate;
    }

    function setAffiliateCommissionRate(address affiliate, uint256 newRate) public onlyOwner {
        require(newRate >= 1 && newRate <= 100, "Invalid commission rate");
        affiliateTracker.setCommissionRate(affiliate, newRate);
        emit CommissionRateUpdated(affiliate, newRate);
    }

    function registerAffiliate(address newAffiliateAddress, uint256 newCommissionRate) public onlyOwner {
        affiliateTracker.registerAffiliate(newAffiliateAddress, newCommissionRate);
        emit AffiliateRegistered(newAffiliateAddress, newCommissionRate);
    }

    function revokeAffiliate(address affiliate) public onlyOwner {
        affiliateTracker.revokeAffiliate(affiliate);
        emit AffiliateRevoked(affiliate);
    }

    function setInstantDirectPayment(address affiliate, bool allowInstantDirectPayment) public onlyOwner {
        affiliates[affiliate].instantDirectPayment = allowInstantDirectPayment;
        emit DirectPaymentToggled(affiliate, allowInstantDirectPayment);
    }

    function toggleDirectPaymentGlobal() public onlyOwner {
        bool isEnabled = affiliateTracker.isDirectPaymentEnabled();
        affiliateTracker.toggleDirectPaymentGlobal();
        emit DirectPaymentToggled(address(0), !isEnabled);
    }

    function toggleDirectPaymentUser(address affiliate) public onlyOwner {
        bool currentState = affiliates[affiliate].instantDirectPayment;
        affiliates[affiliate].instantDirectPayment = !currentState;
        emit DirectPaymentToggled(affiliate, !currentState);
    }

    function allowContract(address _contract) public onlyOwner {
        affiliateTracker.allowContract(_contract);
    }

    function setAffiliateTrackerAddress(address _affiliateTrackerAddress) public onlyOwner {
        affiliateTracker = IAffiliateTracker(_affiliateTrackerAddress);
    }

    function listNFTForSale(string memory uri, uint256 price) public {
        require(msg.sender != address(0), "Invalid address");
        uint256 tokenId = _tokenIdCounter++;
        _tokenURIs[tokenId] = uri;
        tokenPrices[tokenId] = price;
        tokenSellers[tokenId] = msg.sender;
        emit NFTListed(tokenId, uri, price);
    }

    function tokenExists(uint256 tokenId) public view returns (bool) {
        return _ownerOf(tokenId) != address(0);
    }

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(tokenExists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return string(abi.encodePacked(_baseURI(), _tokenURIs[tokenId]));
    }

    function makePayment(uint256 amount, address tokenAddress) external {
    uint256 discountedAmount;
    if (tokenAddress == address(0)) {
        // Process payment in BNB
        discountedAmount = amount;
    } else if (tokenAddress == address(PLRT)) {
        // Process payment in PLRT with 7% discount
        discountedAmount = amount * 93 / 100; // Apply 7% discount
        // Transfer PLRT tokens from user to contract
        require(PLRT.transferFrom(msg.sender, address(this), amount), "PLRT transfer failed");
    } else {
        revert("Invalid token");
    }
    
    // Emit event
    emit PaymentMade(msg.sender, amount, discountedAmount, tokenAddress);
    
    // Other payment processing logic...
}

   
}
