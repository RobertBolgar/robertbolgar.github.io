// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ContentAccessControl is Ownable {
    mapping(address => mapping(uint256 => bool)) private contentAccess;
    address public marketplaceContract;

    event ContentAccessGranted(address indexed nftContract, uint256 indexed tokenId);

    modifier onlyMarketplace() {
        require(msg.sender == marketplaceContract, "Caller is not the NFT Marketplace contract");
        _;
    }

    // Adjusted constructor to accept an initial owner address
    constructor(address initialOwner) Ownable(initialOwner) {}

    function grantContentAccess(address nftContract, uint256 tokenId) external onlyMarketplace {
        contentAccess[nftContract][tokenId] = true;
        emit ContentAccessGranted(nftContract, tokenId);
    }

    function hasContentAccess(address nftContract, uint256 tokenId) public view returns (bool) {
        return contentAccess[nftContract][tokenId];
    }

    function revokeContentAccess(address nftContract, uint256 tokenId) external onlyMarketplace {
        contentAccess[nftContract][tokenId] = false;
    }

    function setMarketplaceContract(address _marketplaceContract) external onlyOwner {
        marketplaceContract = _marketplaceContract;
    }
}
