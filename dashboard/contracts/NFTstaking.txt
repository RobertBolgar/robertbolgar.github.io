// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";
import "@openzeppelin/contracts/utils/Context.sol";

abstract contract Ownable is Context {
    address private _owner;

    error OwnableUnauthorizedAccount(address account);
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract NFTStaking is ERC721Holder, ReentrancyGuard, Ownable {
    struct StakingPosition {
        uint256 amount;
        uint256 stakingTime;
    }

    IERC721 public nftTokenContract;
    IERC20 public rewardToken;

    uint256 public stakingDuration;
    uint256 public minimumDistributionAmount = 100 * (10**18); // For PLRT assuming 18 decimal places
    uint256 public accumulatedFunds;


    mapping(address => StakingPosition) public stakingPositions;
    mapping(address => uint256) public rewardsOwed;
    mapping(uint256 => address) public nftOwners;


    event NFTStaked(address indexed user, uint256 indexed nftId);
    event NFTWithdrawn(address indexed user, uint256 indexed nftId);
    event RewardsClaimed(address indexed user, uint256 amount);
    event RevenueShared(uint256 amount);

    constructor(address _nftTokenAddress, address _rewardTokenAddress, uint256 _stakingDuration, address initialOwner)
        Ownable(initialOwner) 
    {
        nftTokenContract = IERC721(_nftTokenAddress);
        rewardToken = IERC20(_rewardTokenAddress);
        stakingDuration = _stakingDuration;
    }

    function updateMinimumDistributionAmount(uint256 _newAmount) external onlyOwner {
        minimumDistributionAmount = _newAmount;
    }


    function stakeNFT(uint256 nftId) external {
        require(nftTokenContract.ownerOf(nftId) == msg.sender, "Not the NFT owner");
        require(nftOwners[nftId] == address(0), "NFT already staked");

        nftTokenContract.safeTransferFrom(msg.sender, address(this), nftId);
        nftOwners[nftId] = msg.sender;

        emit NFTStaked(msg.sender, nftId);
    }

    function withdrawNFT(uint256 nftId) external {
        require(nftOwners[nftId] == msg.sender, "Not the NFT owner");

        nftTokenContract.safeTransferFrom(address(this), msg.sender, nftId);
        delete nftOwners[nftId];

        emit NFTWithdrawn(msg.sender, nftId);
    }

    function claimRewards() external nonReentrant {
        uint256 rewards = rewardsOwed[msg.sender];
        require(rewards > 0, "No rewards to claim.");
        
        rewardsOwed[msg.sender] = 0;
        rewardToken.transfer(msg.sender, rewards);

        emit RewardsClaimed(msg.sender, rewards);
    }

    function receiveFundsFromMarketplace(uint256 _amount) external nonReentrant {
        require(msg.sender == address(nftTokenContract), "Only the marketplace can transfer funds");
        accumulatedFunds += _amount;

        if (accumulatedFunds >= minimumDistributionAmount) {
            distributeRewards();
            accumulatedFunds = 0;
        }
    }

    function distributeRewards() internal {
        uint256 totalStakedNFTs = getTotalStakedNFTs();
        require(totalStakedNFTs > 0, "No NFTs are staked.");

        uint256 rewardPerNFT = accumulatedFunds / totalStakedNFTs;
        for (uint256 i = 0; i < totalStakedNFTs; i++) {
            address owner = nftOwners[i];
            if (owner != address(0)) {
                rewardsOwed[owner] += rewardPerNFT;
            }
        }

        emit RevenueShared(accumulatedFunds);
    }

    function getTotalStakedNFTs() public view returns (uint256) {
        uint256 totalStaked = 0;
        for (uint256 i = 0; i < 10000; i++) { // Adjust based on your NFT collection size
            if (nftOwners[i] != address(0)) {
                totalStaked++;
            }
        }
        return totalStaked;
    }
}
