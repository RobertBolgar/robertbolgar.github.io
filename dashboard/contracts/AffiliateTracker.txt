// SPDX-License-Identifier: MIT 
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "./IAffiliateTracker.sol";

contract AffiliateTracker is AccessControl, ReentrancyGuard, IAffiliateTracker {
    bytes32 public constant MANAGER_ROLE = keccak256("MANAGER_ROLE");

    struct Affiliate {
        bool isRegistered;
        uint256 commissionRate;
        uint256 earnings;
        bool canDirectPayment;
    }

    mapping(address => Affiliate) public affiliates;
    mapping(address => bool) private allowedContracts;

    bool public directPaymentEnabled = true;
    address public authorizedContract;

    constructor() {
        _setRoleAdmin(MANAGER_ROLE, DEFAULT_ADMIN_ROLE);
    }

    modifier onlyAllowedContracts() {
        require(allowedContracts[msg.sender] || msg.sender == authorizedContract, "Caller is not an allowed contract");
        _;
    }

    modifier onlyAdminOrManager() {
        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(MANAGER_ROLE, msg.sender), "Unauthorized");
        _;
    }

    function registerAffiliate(address affiliate, uint256 commissionRate) external onlyAdminOrManager {
        require(!affiliates[affiliate].isRegistered, "Affiliate already registered");
        require(commissionRate >= 1 && commissionRate <= 100, "Invalid commission rate");
        affiliates[affiliate] = Affiliate(true, commissionRate, 0, directPaymentEnabled);
        emit AffiliateRegistered(affiliate, commissionRate);
    }

    function revokeAffiliate(address affiliate) external onlyAdminOrManager {
        require(affiliates[affiliate].isRegistered, "Affiliate not registered");
        delete affiliates[affiliate];
        emit AffiliateRevoked(affiliate);
    }

    function payCommission(address affiliate, uint256 salePrice, address nft, uint256 tokenId) external onlyAllowedContracts {
        require(affiliates[affiliate].isRegistered, "Affiliate not registered");
        uint256 commission = calculateCommission(salePrice, affiliates[affiliate].commissionRate);
        affiliates[affiliate].earnings += commission;
        emit CommissionPaid(affiliate, commission, nft, tokenId);
    }

    function calculateCommission(uint256 _salePrice, uint256 _rate) public pure returns (uint256) {
        return (_salePrice * _rate) / 100;
    }

    function withdrawEarnings() external nonReentrant {
        Affiliate storage affiliate = affiliates[msg.sender];
        require(affiliate.isRegistered, "Caller is not a registered affiliate");
        require(affiliate.canDirectPayment, "Direct payment is not allowed for this affiliate");

        uint256 earnings = affiliate.earnings;
        require(earnings > 0, "No earnings");

        affiliate.earnings = 0;
        (bool success, ) = msg.sender.call{value: earnings}("");
        require(success, "Transfer failed");

        // emit EarningsWithdrawn(msg.sender, earnings); // Remove this line
    }

    function setCommissionRate(address affiliate, uint256 newRate) external override onlyAdminOrManager {
        require(affiliates[affiliate].isRegistered, "Affiliate not registered");
        require(newRate >= 1 && newRate <= 100, "Invalid commission rate");
        affiliates[affiliate].commissionRate = newRate;
        emit AffiliateCommissionRateUpdated(affiliate, newRate);
    }

    function allowContract(address _contract) external override onlyAdminOrManager {
        allowedContracts[_contract] = true;
        emit ContractAllowed(_contract);
    }

    function toggleDirectPaymentGlobal() external override onlyAdminOrManager {
        directPaymentEnabled = !directPaymentEnabled;
        emit DirectPaymentToggled(directPaymentEnabled);
    }

    function toggleDirectPaymentUser(address user) external override onlyAdminOrManager {
        require(affiliates[user].isRegistered, "User is not a registered affiliate");
        affiliates[user].canDirectPayment = !affiliates[user].canDirectPayment;
        emit DirectPaymentToggled(affiliates[user].canDirectPayment);
    }

    function setAuthorizedContract(address contractAddress) external override onlyAdminOrManager {
        authorizedContract = contractAddress;
        emit AuthorizedContractChanged(contractAddress);
    }

    function isDirectPaymentEnabled() external view override returns (bool) {
        return directPaymentEnabled;
    }

    function getAffiliateCommissionRate(address affiliate) external view returns (uint256) {
    require(affiliates[affiliate].isRegistered, "Affiliate not registered");
    return affiliates[affiliate].commissionRate;
}


    function getAffiliateEarnings(address affiliate) external view override returns (uint256) {
        require(affiliates[affiliate].isRegistered, "Affiliate not registered");
        return affiliates[affiliate].earnings;
    }

    // Utility function to grant manager role to an address, callable only by admins
    function grantManagerRole(address account) public onlyRole(DEFAULT_ADMIN_ROLE) {
        grantRole(MANAGER_ROLE, account);
    }

    // Utility function to revoke manager role from an address, callable only by admins
    function revokeManagerRole(address account) public onlyRole(DEFAULT_ADMIN_ROLE) {
        revokeRole(MANAGER_ROLE, account);
    }
    
}
 
