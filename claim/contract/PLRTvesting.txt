// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract PLRTVesting is Ownable(msg.sender), ReentrancyGuard {
    IERC20 public plrToken;

    enum VestingGroup { PrivateSale, Team, Treasury }

    struct VestingDetail {
        uint256 totalAllocation;
        uint256 amountWithdrawn;
        uint256 vestingStart;
        VestingGroup group;
    }

    mapping(address => VestingDetail) public vestingDetails;

    uint256 public constant WITHDRAWAL_RATE = 10; // Example: 10% for simplicity
    uint256 public vestingPeriod = 10 days; // Adjustable vesting period

    event Withdrawal(address indexed user, uint256 amount);
    event VestingAdded(address indexed user, uint256 allocation, VestingGroup group);

    constructor(IERC20 _tokenAddress) {
        require(address(_tokenAddress) != address(0), "Token address cannot be zero.");
        plrToken = _tokenAddress;
        transferOwnership(msg.sender); // Assuming you want to set the deployer as the owner.
    }

    // Adjusted to initialize vesting with group-specific logic.
    function initializeVesting(address[] calldata users, uint256[] calldata allocations, VestingGroup group) external onlyOwner {
        require(users.length == allocations.length, "Users and allocations length mismatch");
        for (uint256 i = 0; i < users.length; i++) {
            vestingDetails[users[i]] = VestingDetail({
                totalAllocation: allocations[i],
                amountWithdrawn: 0,
                vestingStart: block.timestamp,
                group: group
            });
            emit VestingAdded(users[i], allocations[i], group);
        }
    }

    function withdrawTokens() external nonReentrant {
        VestingDetail storage detail = vestingDetails[msg.sender];
        require(detail.totalAllocation > 0, "No allocation for this address.");
        require(block.timestamp >= detail.vestingStart + vestingPeriod, "Vesting period has not yet started");

        uint256 availableAmount = availableToWithdraw(msg.sender);
        require(availableAmount > 0, "No tokens available to withdraw.");

        detail.amountWithdrawn += availableAmount;
        plrToken.transfer(msg.sender, availableAmount);

        emit Withdrawal(msg.sender, availableAmount);
    }

    // This function now considers vesting group and total allocation in its calculation
    function availableToWithdraw(address user) public view returns (uint256) {
        VestingDetail memory detail = vestingDetails[user];
        uint256 timeElapsed = block.timestamp - detail.vestingStart;
        uint256 periodsElapsed = timeElapsed / vestingPeriod;
        uint256 totalClaimable = (detail.totalAllocation * WITHDRAWAL_RATE / 100) * periodsElapsed;

        uint256 availableAmount = totalClaimable > detail.totalAllocation ? detail.totalAllocation - detail.amountWithdrawn : totalClaimable - detail.amountWithdrawn;
        
        return availableAmount;
    }

    // Allows updating the vesting period for new vesting schedules.
    function updateVestingPeriod(uint256 _newPeriod) external onlyOwner {
        vestingPeriod = _newPeriod;
    }
    
    // Additional functions like updateTeamMemberAddress can be modified to fit the new structure
}
