// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol";


    contract PLRTVesting is Ownable, ReentrancyGuard {
    // Address of the PLRT token contract
    IERC20 public plrtToken;
    IERC721Enumerable public plrMintPassNFT;
    
    // Struct to store vesting schedule details
    struct VestingSchedule {
        uint256 start;
        uint256 totalAllocation;
        uint256 claimedAmount;
        uint256 lastClaimTime;
    }

    // Vesting parameters
    uint256 public cliffDuration = 30 days;
    uint256 public vestingDuration = 7 days;

    // Vesting schedules for team members and private sale NFT group
    mapping(address => VestingSchedule) public teamVestingSchedules;
    mapping(address => VestingSchedule) public privateSaleNFTVestingSchedules;

    // Treasury vesting schedule
    VestingSchedule public treasuryVestingSchedule;

    // Allocation limits
    uint256 public constant MAX_TREASURY_ALLOCATION = 10_000_000 * (10 ** 18);
    uint256 public constant MAX_TEAM_ALLOCATION = 15_000_000 * (10 ** 18);
    uint256 public constant MAX_PRIVATE_SALE_ALLOCATION = 5_000_000 * (10 ** 18);

    // Event emitted when tokens are claimed
    event TokensClaimed(address indexed recipient, uint256 amount);

   // Constructor to initialize contract with PLRT token address
    constructor(address _plrtToken, address _owner) Ownable(_owner) {
        plrtToken = IERC20(_plrtToken);
    }

    // Function to set up vesting schedule for the treasury
    function setTreasuryVestingSchedule(uint256 totalAllocation) external onlyOwner {
        require(totalAllocation <= MAX_TREASURY_ALLOCATION, "Exceeds max treasury allocation");
        require(treasuryVestingSchedule.totalAllocation == 0, "Treasury vesting schedule already set");

        // Set up vesting schedule
        treasuryVestingSchedule = VestingSchedule({
            start: block.timestamp,
            totalAllocation: totalAllocation,
            claimedAmount: 0,
            lastClaimTime: 0
        });
    }

    // Function to set up vesting schedule for a team member
    function setTeamMemberVestingSchedule(address teamMember, uint256 totalAllocation) external onlyOwner {
        require(totalAllocation <= MAX_TEAM_ALLOCATION, "Exceeds max team member allocation");

        // Set up vesting schedule
        teamVestingSchedules[teamMember] = VestingSchedule({
            start: block.timestamp,
            totalAllocation: totalAllocation,
            claimedAmount: 0,
            lastClaimTime: 0
        });
    }

    // Function to set up vesting schedule for a private sale NFT holder
    function setPrivateSaleNFTVestingSchedule(address nftHolder, uint256 totalAllocation) external onlyOwner {
        require(totalAllocation <= MAX_PRIVATE_SALE_ALLOCATION, "Exceeds max private sale allocation");

        // Set up vesting schedule
        privateSaleNFTVestingSchedules[nftHolder] = VestingSchedule({
            start: block.timestamp,
            totalAllocation: totalAllocation,
            claimedAmount: 0,
            lastClaimTime: 0
        });
    }

    // Function to calculate claimable amount for a vesting schedule
    function calculateClaimableAmount(VestingSchedule storage schedule) internal view returns (uint256) {
        if (block.timestamp < schedule.start + cliffDuration) {
            return 0;
        }

        uint256 elapsedTime = block.timestamp - (schedule.start + cliffDuration);
        uint256 elapsedWeeks = elapsedTime / vestingDuration;
        uint256 claimableAmount = (schedule.totalAllocation / 10) * elapsedWeeks;

        // Ensure claimable amount does not exceed total allocation
        if (claimableAmount > schedule.totalAllocation) {
            claimableAmount = schedule.totalAllocation;
        }

        // Ensure claimable amount does not exceed remaining balance
        uint256 remainingBalance = schedule.totalAllocation - schedule.claimedAmount;
        if (claimableAmount > remainingBalance) {
            claimableAmount = remainingBalance;
        }

        return claimableAmount;
    }

    // Function to claim tokens from a vesting schedule
    function claimTokens(address recipient) external nonReentrant {
        require(recipient != address(0), "Invalid recipient");

        VestingSchedule storage schedule = teamVestingSchedules[recipient];
        require(schedule.totalAllocation > 0, "Vesting schedule not set");
        require(block.timestamp >= schedule.start, "Vesting has not started yet");

        uint256 claimableAmount = calculateClaimableAmount(schedule);
        require(claimableAmount > 0, "No tokens available to claim");

        // Transfer tokens to recipient
        plrtToken.transfer(recipient, claimableAmount);

        // Update claimed amount and last claim time
        schedule.claimedAmount += claimableAmount;
        schedule.lastClaimTime = block.timestamp;

        emit TokensClaimed(recipient, claimableAmount);
    }

  // Function to set the PLRmintpass NFT contract address
    function setPLRMintPassNFT(address _plrMintPassNFT) external onlyOwner {
        plrMintPassNFT = IERC721Enumerable(_plrMintPassNFT);
    }

    // Function to get the number of PLRmintpass NFTs owned by an address
    function getOwnedMintPassNFTs(address user) public view returns (uint256) {
        return plrMintPassNFT.balanceOf(user);
    }

    // Function to calculate the total allocation based on the number of PLRmintpass NFTs owned
    function calculateTotalAllocation(uint256 numNFTs) public pure returns (uint256) {
        uint256 PLRPerNFT = 20000; // Assuming each NFT is worth 20000 PLR tokens
        return numNFTs * PLRPerNFT;
    }

    // Function to set up vesting schedule based on PLRmintpass NFT ownership
    function setupVestingSchedule(address user) public {
        uint256 numNFTs = getOwnedMintPassNFTs(user);
        uint256 totalAllocation = calculateTotalAllocation(numNFTs);

        // Set up vesting schedule
        VestingSchedule storage schedule = privateSaleNFTVestingSchedules[user];
        schedule.totalAllocation = totalAllocation;
        schedule.start = block.timestamp;
        schedule.claimedAmount = 0;
        schedule.lastClaimTime = 0;
    }
}
